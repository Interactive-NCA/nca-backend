---


# The random seed
#seed: 42

# The name of the main algorithm (see below the description of 'algoSampling')
main_algorithm_name: algoTotal
#main_algorithm_name: algoQD

# The list of all container.
containers:
    cont0:
        type: Grid                               # The type of the container (e.g. Grid, CVTGrid, Container, NoveltyArchive, ...)
        name: cont0                              # The name of the container. Optional. Default to the parent key (here also 'cont0')
        shape: [32, 32]                          # The number of bins for each feature
        max_items_per_bin: 10                     # The number of items in each bin of the grid
        fitness_domain: [[0., 1.]]               # The domain of each fitness objective (here we only have one objective)
        features_domain: [[0., 1.], [0., 1.]]    # The domain of each feature
        discard_random_on_bin_overload: True


# The list of all algorithms
algorithms:
    # Default parameter values for each algorithm
    optimisation_task: minimisation   # We perform maximisation of all fitness objectives
    dimension: 5                      # The number of dimensions of the problem. For rastrigin, any dimension >= 2 can be chosen
    ind_domain: [0., 1.]              # The domain of each value of the genome (optional)
    container: cont0                  # The container to use to store individuals told to the optimisers

    ind_generator:
        type: GenSampledIndividuals

    # We first explore the feature landscape by random search over 2000 evaluations
    algoInit:
        type: RandomUniform # The type of algorithm. Here, just perform a random search
        budget: 1000        # The total number of allowed evaluations for this algorithm

    # Then, we use an evolutionary algorithm that perform random search and polynomial mutations. This algorithm makes a trade-off between quality (finding good performing solutions) and diversity (find solutions corresponding to each bin of the grid)
    algoQD:
        #type: RandomSearchMutPolyBounded
        type: DGRandomSearchMutPolyBounded
        budget: 50000       # The total number of allowed evaluations for this algorithm
        batch_size: 250     # The number of evaluations in each subsequent batch 
        sel_pb: 0.9         # The probability of performing selection+variation instead of initialising a new genome
        init_pb: 0.1        # The probability of initiating a new genome instead of performing selection
        mut_pb: 1.0         # The probability of mutating each value of the genome of a selected individual
        eta: 20.            # The ETA parameter of the polynomial mutation (as defined in the origin NSGA-II paper by Deb.). It corresponds to the crowding degree of the mutation. A high ETA will produce mutants close to its parent, a small ETA will produce offspring with more changes.
        base_ind_gen: ind_generator


    # All described algorithms are placed in a Sequence (Sq) of algorithms to execute them one after the other
    algoTotal:
        type: Sq
        algorithms: ['algoInit', 'algoQD'] # The list of algorithms to execute
        tell_container_when_switching: False


# MODELINE "{{{1
# vim:expandtab:softtabstop=4:shiftwidth=4:fileencoding=utf-8
# vim:foldmethod=marker
